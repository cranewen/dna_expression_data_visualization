{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(gplots)\nlibrary(reshape2)\nlibrary(plotly)\nlibrary(ggplot2)\n\n\nshinyServer(function(input,output,session){\n  conditionReact <- reactive({\n    # desc <- input$description\n    conditions <- condition %>% inner_join(gene_expression, by = c('id' = 'condition_id')) %>%\n      inner_join(experiment, by = c('experiment_id' = 'id')) %>%\n      filter(description == input$description) %>% distinct(name)\n    conditions$name\n  })\n  \n  geneReact <- reactive({\n      genes <- gene %>% inner_join(gene_expression, by = c('id' = 'gene_id')) %>%\n        inner_join(experiment, by = c('experiment_id' = 'id')) %>%\n        inner_join(condition, by = c('condition_id' = 'id')) %>%\n        filter((description == input$description)) %>% distinct(name.x)\n      genes$name.x\n  })\n  \n  \n  updateSelectizeInput(session, inputId = 'description', choices = sort(experiment$description), server = TRUE)\n  \n  # select input for conditions\n  output$select1 <- renderUI({\n    if(is.null(input$description))\n      return(NULL)\n    selectizeInput(inputId = 'condition', label = 'Please select conditions', \n                   choices = sort(conditionReact()), multiple = TRUE, options = list(create = FALSE))\n  })\n  \n  # select input for genes\n  output$select2 <- renderUI({\n    if(is.null(input$condition))\n      return(NULL)\n    selectizeInput(inputId = 'gene', label = 'Please select genes', \n                   choices = sort(geneReact()), multiple = TRUE, options = list(create = FALSE))\n  })\n  \n \n  \n  getDescription_hmap <- function(){\n    desc <- eventReactive(input$hmap, {\n      input$description\n    })\n    return(desc())\n  }\n  \n  getDescription_barChart <- function(){\n    desc <- eventReactive(input$barchart, {\n      input$description\n    })\n    return(desc())\n  }\n  \n  getDescription_geneComp <- function(){\n    desc <- eventReactive(input$geneComp, {\n      input$description\n    })\n    return(desc())\n  }\n  \n  # For clicking on \"Show Data Table\"\n  getDescription_csv <- function(){\n    desc <- eventReactive(input$csvtable, {\n      input$description\n    })\n    return(desc())\n  }\n  # For clicking on barchart button\n  getConditionsNames <- function(){\n    conditions <- eventReactive(input$barchart, {\n      input$condition\n    })\n    return(conditions())\n  }\n  \n  # For clicking on \"Show Data Table\"\n  getConditionsNames_csv <- function(){\n    conditions <- eventReactive(input$csvtable, {\n      input$condition\n    })\n    return(conditions())\n  }\n  \n  getGeneNames <- function(){\n    geneNames <- eventReactive(input$barchart, {\n      input$gene\n    })\n    return(geneNames())\n  }\n  \n  # For clicking on \"Show Data Table\"\n  getGeneNames_csv <- function(){\n    geneNames <- eventReactive(input$csvtable, {\n      input$gene\n    })\n    return(geneNames())\n  }\n  \n  getConditionsDat <- function(){\n    conditionsNames <- getConditionsNames()\n    conditions <- list()\n    geneNames <- getGeneNames()\n    lenOfConditionNames <- length(conditionsNames)\n    \n    if(length(geneNames) == 0){\n      for(i in 1:lenOfConditionNames){\n        cond <- experiment %>% inner_join(gene_expression, by = c(\"id\" = \"experiment_id\")) %>%\n          inner_join(condition, by = c(\"condition_id\" = \"id\")) %>%\n          inner_join(gene, by = c(\"gene_id\" = \"id\")) %>%\n          filter(name.x == conditionsNames[i] & description == getDescription_barChart()) %>% \n          select(expression, name.y, name.x)\n        singleCond <- aggregate(expression ~ name.y, data = cond, FUN = \"mean\")\n        conditions[[i]] <- singleCond\n      }\n    }else {\n      for(i in 1:lenOfConditionNames){\n        cond <- experiment %>% inner_join(gene_expression, by = c(\"id\" = \"experiment_id\")) %>%\n          inner_join(condition, by = c(\"condition_id\" = \"id\")) %>%\n          inner_join(gene, by = c(\"gene_id\" = \"id\")) %>%\n          filter(name.x == conditionsNames[i] & description == getDescription_barChart() & name.y %in% geneNames) %>% \n          select(expression, name.y, name.x)\n        singleCond <- aggregate(expression ~ name.y, data = cond, FUN = \"mean\")\n        conditions[[i]] <- singleCond\n      }\n    }\n    \n    return(conditions)\n  }\n\n  # Get all the replicated gene expressions from 1 particular gene from multiple conditions,\n  # name.y is gene name, name.x is condition name\n  getGeneExpression <- function(geneNames, conditionNames){\n    geneExpression <- experiment %>% inner_join(gene_expression, by = c(\"id\" = \"experiment_id\")) %>%\n          inner_join(condition, by = c(\"condition_id\" = \"id\")) %>%\n          inner_join(gene, by = c(\"gene_id\" = \"id\")) %>%\n          filter(name.x %in% conditionNames & description == getDescription_barChart() & name.y %in% geneNames) %>% \n          select(expression, name.y, name.x)\n    colnames(geneExpression) <- c(\"expression\", \"gene\", \"condition\")\n    return(geneExpression)\n  }\n  \n  # name.x is condition, name.y is gene\n  getGeneExpression_3arg <- function(geneNames, conditionNames, desc){\n    geneExpression <- experiment %>% inner_join(gene_expression, by = c(\"id\" = \"experiment_id\")) %>%\n      inner_join(condition, by = c(\"condition_id\" = \"id\")) %>%\n      inner_join(gene, by = c(\"gene_id\" = \"id\")) %>%\n      filter(name.x %in% conditionNames & description == desc & name.y %in% geneNames) %>% \n      select(name.y, name.x, expression)\n    colnames(geneExpression) <- c(\"gene\", \"condition\", \"expression\")\n    return(geneExpression)\n  }\n  \n  getBoxPlotDat <- function(){\n    conditions <- getConditionsNames()\n    geneNames <- getGeneNames()\n    boxPlotDat <- getGeneExpression(geneNames = geneNames, conditionNames = conditions)\n    return(boxPlotDat)\n    \n  }\n  \n  # Heat map table with input of a reactive description.\n  getHeatmapDat <- function(){\n    hmDat <- experiment %>% inner_join(gene_expression, by = c(\"id\" = \"experiment_id\")) %>% \n      inner_join(gene, by = c(\"gene_id\" = \"id\")) %>% \n      inner_join(condition, by = c(\"condition_id\" = \"id\")) %>% \n      filter(description == getDescription_hmap()) %>% \n      select(c(\"name.x\", \"name.y\", \"expression\"))\n    colnames(hmDat) <- c(\"gene\", \"condition\", \"expression\")\n    return(hmDat)\n  }\n  \n  hmapTable <- function(){\n    castedDat <- dcast(getHeatmapDat(), gene ~ condition, value.var = \"expression\", mean)\n    rownames(castedDat) <- castedDat$gene\n    castedDat <- castedDat[,-1]\n    return(castedDat)\n  }\n  \n  hmapTablePW <- function(){\n    datList <- list()\n    castedDat <- dcast(getHeatmapDat(), gene ~ condition, value.var = \"expression\", mean)\n    rownames(castedDat) <- castedDat$gene\n    castedDat <- castedDat[,-1]\n    nameCombs <- combn(names(castedDat),2)\n    for(i in 1:dim(nameCombs)[2]){\n      pairedDat <- log2(castedDat[nameCombs[,i][1]] / castedDat[nameCombs[,i][2]])\n      colnames(pairedDat) <- paste(nameCombs[,i], collapse = \" / \")\n      datList[[i]] <- pairedDat\n    }\n    return(datList)\n  }\n  \n  # tTestResults  <- function(){\n  #   geneNames <- getGeneNames()\n  #   conditionNames <- getConditionsNames()\n  #   results <- list()\n  #   validate(\n  #     need(length(conditionNames) == 2, \"Please select only 2 conditions!\"),\n  #     need(!is.null(geneNames), \"Please select at least 1 gene\")\n  #   )\n  #   for(i in 1:length(geneNames)){\n  #     result <- t.test(getGeneExpression(geneNames[i],conditionNames[1])$expression, \n  #                      getGeneExpression(geneNames[i],conditionNames[2])$expression)\n  #     result$data.name <- paste(conditionNames[1],\" vs \",conditionNames[2])\n  #     result$gene.name <- geneNames[i]\n  #     results[[i]] <- result\n  #   }\n  #  \n  #   return(results)\n  # }\n  # \n  # results2table <- function(){\n  #   results <- tTestResults()\n  #   dfTable <- sapply(results, function(x){\n  #     c(p.value = x$p.value, \n  #       ci_low = x$conf.int[1],\n  #       ci_high = x$conf.int[2],\n  #       conditions_names = x$data.name,\n  #       gene_name = x$gene.name\n  #       )\n  #   })\n  #   return(data.frame(t(dfTable)))\n  # }\n  ###### ANOVA Results & generates tables for display ######\n  anovaResults <- function(){\n    geneNames <- getGeneNames()\n    conditionNames <- getConditionsNames()\n    results <- list()\n    validate(\n      need(length(conditionNames) > 1, \"Please select at least 1 condition!\"),\n      need(!is.null(geneNames), \"Please select at least 1 gene\")\n    )\n    if(length(conditionNames) == 2){\n      for(i in 1:length(geneNames)){\n        anovaDat <- getGeneExpression(geneNames[i], conditionNames)\n        fit <- lm(anovaDat$expression ~ anovaDat$condition)\n        result <- anova(fit, data = anovaDat)\n        print(result)\n        result$data.name <- paste(conditionNames[1],\" vs \",conditionNames[2])\n        result$gene.name <- geneNames[i]\n        results[[i]] <- result\n      }\n      return(results)\n    }\n    if(length(conditionNames) > 2){\n      for(i in 1:length(geneNames)){\n        anovaDat <- getGeneExpression(geneNames[i], conditionNames)\n        fit <- lm(anovaDat$expression ~ anovaDat$condition)\n        result <- anova(fit, data = anovaDat)\n        result$data.name <- paste(conditionNames, collapse = \" vs \")\n        result$gene.name <- geneNames[i]\n        results[[i]] <- result\n      }\n      return(results)\n    }\n  }\n\n  anovaResults2table <- function(){\n    results <- anovaResults()\n    dfTable <- sapply(results, function(x){\n      c(gene_name = x$gene.name[2],\n        conditions_names = x$data.name[1],\n        p.value = x$`Pr(>F)`[1],\n        \"F value\" = x$`F value`[1]\n      )\n    })\n    return(data.frame(t(dfTable)))\n  }\n  \n  ########## Download CSV from selected data, also show the datatable###########\n  downloadCSV <- function(){\n    observeEvent(input$csvtable,{\n      if(is.null(input$gene) | is.null(input$condition) | is.null(input$description)){\n        return(NULL)\n      }\n      dat <- getGeneExpression_3arg(input$gene, input$condition, input$description)\n      output$csvdownload <- downloadHandler(\n        filename = \"data.csv\",\n        content = function(file){\n          write.csv(dat, file)\n        }\n      )\n      output$csvTable <- renderTable(dat, digits = 6)\n    })\n  }\n  downloadCSV()\n\n  ###### Plotly Heatmap ######\n  \n  observeEvent(input$hmap, {\n    output$heatmap <- renderPlotly({\n      matrixDat <- data.matrix(hmapTable())\n      hmap_df <- hmapTable()\n      #labels for x and y axis\n      xnames <- names(hmap_df)\n      ynames <- rownames(hmap_df)\n      palette <- colorRampPalette(c(\"#E0F3F8\", \"#ABD9E9\", \"#74ADD1\", \"#4575B4\", \"#313695\",\n                                    \"#FEE090\", \"#FDAE61\"), space = \"Lab\", bias = 0.5)\n      hmap <- plot_ly(x = xnames, y = ynames, z = matrixDat, type = \"heatmap\", colors = palette(50)) %>%\n        layout(xaxis = list(title = \"Conditions\"), yaxis = list(title = \"\"),\n               width = 900, height = 600, margin = list(b = 160))\n      \n    })\n  })\n  \n  \n  ###### Plotly Pairwised Heatmaps ######\n  observeEvent(input$hmap2, {\n    output$heatmap <- renderPlotly({\n      hmapDats <- hmapTablePW()\n      plots <- list()\n      for(i in 1:length(hmapDats)){\n        matrixDat <- data.matrix(hmapDats[[i]])\n        hmap_df <- hmapDats[[i]]\n        xnames <- names(hmap_df)\n        ynames <- rownames(hmap_df)\n        palette <- colorRampPalette(c(\"#65DAFD\",\"#FFFFFF\", \"#FF0000\"), space = \"Lab\", bias = 0.5)\n        hmap <- plot_ly(x = xnames, y = ynames, z = matrixDat, type = \"heatmap\", colors = palette(10)) %>% \n          layout(xaxis = list(title = \"Conditions\"), yaxis = list(title = \"\"),\n                 width = 900, height = 1200, margin = list(b = 160))\n        plots[[i]] <- hmap\n      }\n      hmaps <- subplot(nrows =3, plots, margin = 0.05)\n    })\n  })\n  \n \n  \n  ###### Plotly Barchart ######\n   observeEvent(input$barchart, {\n     output$barchartExp <- renderPlotly({\n       if(is.null(input$condition))\n         return(NULL)\n       conditionsDat <- getConditionsDat()\n       \n       for(i in 1:length(conditionsDat)){\n         if(i == 1){\n           multiBar <- plot_ly(data = conditionsDat[[i]], x = ~name.y, y = ~expression, type = 'bar', \n                               margin = c(12,10), name = getConditionsNames()[i]) %>%\n             layout(yaxis = list(title = \"AVG\"), xaxis = list(title = \"\"), margin = list(b = 160))\n         }\n         else{\n           multiBar <- add_trace(multiBar, data = conditionsDat[[i]], x = ~name.y, y = ~expression, type = 'bar', \n                                 name = getConditionsNames()[i])\n         }\n       }\n      multiBar\n     })\n   })\n  \n ############# Plotly BoxPlot ################\n  \n  observeEvent(input$barchart, {\n    output$boxplot <- renderPlot({\n      boxPlotDat <- getBoxPlotDat()\n      colnames(boxPlotDat) <- c(\"expression\", \"gene\", \"conditions\")\n      ggplot(boxPlotDat, aes(x = gene, y = expression, fill = conditions)) +\n        geom_boxplot(position=position_dodge(0.8)) + \n        geom_dotplot(binaxis = \"y\", stackdir = \"center\", position=position_dodge(0.8)) +\n        theme(axis.title.x=element_blank(), axis.title.y=element_blank())\n      \n    })\n  })\n\n  observeEvent(input$barchart, {\n    output$ANOVA_results <- renderDataTable(anovaResults2table())\n  })\n  \n \n  #####################################################\n\n  # Disconnect mysql\n  session$onSessionEnded(function(){lapply(dbListConnections(dbDriver(drv=\"MySQL\")), dbDisconnect)})\n  \n})\n\n",
    "created" : 1503324872321.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1995992644",
    "id" : "FB4D27CC",
    "lastKnownWriteTime" : 1503693842,
    "last_content_update" : 1503693842152,
    "path" : "C:/Users/ywen/OneDrive - Ironwood Pharmaceuticals/B_DNA Project/B_DNA_Webapp/R Shiny/test/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}