{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(gplots)\nlibrary(reshape2)\nlibrary(plotly)\nlibrary(ggplot2)\n# library(RColorBrewer)\n\nshinyServer(function(input, output, session) {\n  \n  ###### reactive attributes for UI ######\n  output$select1 <- renderUI({\n    if(is.null(input$gene))\n      return(NULL)\n    selectizeInput(inputId = 'experiment', label = 'Please select experiments', \n                   choices = sort(experimentReact()), multiple = TRUE, options = list(create = FALSE))\n  })\n  \n  output$select2 <- renderUI({\n    if(is.null(input$experiment))\n      return(NULL)\n    selectizeInput(inputId = 'condition', label = 'Please select conditions', \n                   choices = conditionReact(), multiple = TRUE, options = list(create = FALSE))\n  })\n  \n  experimentReact <- reactive({\n    experiments <- experiment %>% inner_join(gene_expression, by = c('id' = 'experiment_id' )) %>% \n      inner_join(gene, by = c('gene_id' = 'id')) %>% \n      filter(name == input$gene)  %>% distinct(description)\n    experiments$description\n  })\n  \n  conditionReact <- reactive({\n    getDesc_conditions(input$experiment)\n  })\n  \n  updateSelectizeInput(session, inputId = 'gene', choices = sort(gene$name), server = TRUE)\n  \n  \n  \n  ###### Application logics ######\n  # Get descriptions and conditions as list,\n  # In order to select conditions that match with the description\n  # The format: description-condition\n  getDesc_conditions <- function(descriptions){\n    conditions_list <- list()\n    for(i in 1:length(descriptions)){\n      conditions <- condition %>% inner_join(gene_expression, by = c('id' = 'condition_id')) %>%\n        inner_join(gene, by = c('gene_id'= 'id')) %>%\n        inner_join(experiment, by = c('experiment_id' = 'id')) %>% \n        filter(description == descriptions[[i]] & name.y == input$gene) %>% distinct(name.x)\n      conditions_list[[i]] = conditions$name.x\n    }\n    desc_cond_list <- rbind(descriptions, conditions_list)\n    desc_cond_list <- unlist(apply(desc_cond_list, 2, function(x){paste(x$descriptions,\":\",x$conditions_list)}))\n    return(desc_cond_list)\n  }\n  \n  \n  getExperiments <- function(){\n    experiments <- eventReactive(input$barchart,{\n      input$experiment\n    })\n    return(experiments())\n  }\n  \n  ############################# input$condition - start ##################################\n  # Get a list of experiments and a list of conditions from input$condition \n  # Two lists have the same length, because in input$condition, \n  # the format will be \"mdx  mice diaphragm sample 35-plex  3-18-16 : MDX\"\n  # so it is like key<->value style. Then split them by \":\", we get two same length lists.\n  # Therefore, we can get all the conditions that match its experiment\n  \n  getSelectedDesc_cond_list <- function(){\n    desc_cond_list <- eventReactive(input$barchart, {\n      input$condition\n    })\n    return(desc_cond_list())\n  }\n  \n  getSelectedExperiments <- function(){\n    desc_cond_list <- getSelectedDesc_cond_list()\n    descs <- unlist(lapply(desc_cond_list, function(x){sub(\"( : .*)\",\"\", x)})) \n    return(descs)\n  }\n  \n  getSelectedCondtions <- function(){\n    desc_cond_list <- getSelectedDesc_cond_list()\n    condtions <- unlist(lapply(desc_cond_list, function(x){sub(\"(.*?: )\",\"\", x)}))\n    return(condtions)\n  }\n  \n  # Get the conditions list correspond to the 1 particular experiment and 1 gene\n  getConditionsList <- function(experiment){\n    conditionsList <- list()\n    selectedExperiments <- getSelectedExperiments()\n    selectedConditions <- getSelectedCondtions()\n    for(i in 1:length(selectedExperiments)){\n      if(experiment %in% selectedExperiments[i]){\n        conditionsList[[i]] <- selectedConditions[i]\n      }\n    }\n    conditionsList <- Filter(Negate(is.null), conditionsList)\n    return(conditionsList)\n  }\n  \n  ############################# input$condition - end ##################################\n  \n  getBarChartDat <- function(){\n    experiments <- getExperiments()\n    conditions <- list()\n    \n    for(i in 1:length(experiments)){\n      conditions[[i]] <- getConditionsList(experiments[i])\n    }\n    datList <- list()\n    \n    for(i in 1:length(experiments)){\n      if(length(conditions[[i]]) == 0){\n        dat <- gene_expression %>% inner_join(gene, by = c('gene_id' = 'id')) %>% \n          inner_join(experiment, by = c('experiment_id' = 'id')) %>% \n          inner_join(condition, by = c('condition_id' = 'id')) %>% \n          filter(description == experiments[i] & name.x == input$gene) %>%\n          select(expression, name.y)\n        colnames(dat) <- c('expression', 'condition')\n        dat <- aggregate(expression ~ condition, data = dat, FUN = 'mean')\n        datList[[i]] <- dat\n      }else{\n        dat <- gene_expression %>% inner_join(gene, by = c('gene_id' = 'id')) %>% \n          inner_join(experiment, by = c('experiment_id' = 'id')) %>% \n          inner_join(condition, by = c('condition_id' = 'id')) %>% \n          filter(description == experiments[i] & name.y %in% conditions[[i]] & name.x == input$gene) %>%\n          select(expression, name.y)\n        colnames(dat) <- c('expression', 'condition')\n        dat <- aggregate(expression ~ condition, data = dat, FUN = 'mean')\n        datList[[i]] <- dat\n      }\n      \n    }\n    return(datList)\n  }\n  \n  \n  getBoxPlotDat <- function(){\n    experiments <- getExperiments()\n    conditions <- list()\n    \n    for(i in 1:length(experiments)){\n      conditions[[i]] <- getConditionsList(experiments[i])\n    }\n    datList <- list()\n    \n    for(i in 1:length(experiments)){\n      dat <- gene_expression %>% inner_join(gene, by = c('gene_id' = 'id')) %>%\n        inner_join(experiment, by = c('experiment_id' = 'id')) %>%\n        inner_join(condition, by = c('condition_id' = 'id')) %>%\n        filter(description == experiments[i] & name.y %in% conditions[[i]]  & name.x == input$gene) %>%\n        select(expression, name.y, description)\n      colnames(dat) <- c('expression', 'condition', 'experiment')\n      datList[[i]] <- dat\n    }\n    boxPlotDat <- do.call(\"rbind\", datList)\n    return(boxPlotDat)\n  }\n  \n############################### ANOVA - start #################################\n  \n  getANOVAdat <- function(){\n    experiments <- getExperiments()\n    conditions <- list()\n    \n    for(i in 1:length(experiments)){\n      conditions[[i]] <- getConditionsList(experiments[i])\n    }\n    \n    dataList <- list()\n    anovaResults <- list()\n    \n    for(i in 1:length(experiments)){\n      dat <- gene_expression %>% inner_join(gene, by = c('gene_id' = 'id')) %>%\n        inner_join(experiment, by = c('experiment_id' = 'id')) %>%\n        inner_join(condition, by = c('condition_id' = 'id')) %>%\n        filter(description == experiments[i] & name.y %in% conditions[[i]]  & name.x == input$gene) %>%\n        select(name.x, description, name.y, expression)\n      colnames(dat) <- c('gene', 'experiment', 'condition', 'expression')\n      if(length(conditions[[i]]) > 1){\n        fit <- lm(dat$expression ~ dat$condition)\n        result <- anova(fit, data = dat)\n        result$condition.name <- paste(conditions[[i]], collapse = \" vs \")\n        result$gene.name <- input$gene\n        result$experiment <- experiments[i]\n        anovaResults[[i]] <- result\n      }\n    }\n    \n    return(anovaResults)\n    \n  }\n  \n  anovaResults2table <- function(){\n    results <- getANOVAdat()\n    dfTable <- sapply(results, function(x){\n      c(gene_name = x$gene.name[2],\n        experiment = x$experiment[2],\n        conditions_names = x$condition.name[1],\n        p.value = x$`Pr(>F)`[1],\n        \"F value\" = x$`F value`[1]\n      )\n    })\n    return(data.frame(t(dfTable)))\n  }\n  \n  ############################### ANOVA - end ##################################\n  getDownloadDat <- function(){\n    experiments <- getExperiments()\n    conditions <- list()\n    \n    for(i in 1:length(experiments)){\n      conditions[[i]] <- getConditionsList(experiments[i])\n    }\n    datList <- list()\n    \n    for(i in 1:length(experiments)){\n      dat <- gene_expression %>% inner_join(gene, by = c('gene_id' = 'id')) %>%\n        inner_join(experiment, by = c('experiment_id' = 'id')) %>%\n        inner_join(condition, by = c('condition_id' = 'id')) %>%\n        filter(description == experiments[i] & name.y %in% conditions[[i]]  & name.x == input$gene) %>%\n        select(name.x, description, name.y, expression)\n      colnames(dat) <- c('gene', 'experiment', 'condition', 'expression')\n      datList[[i]] <- dat\n    }\n    downloadDat <- do.call(\"rbind\", datList)\n    return(downloadDat)\n  }\n  \n  ############ Plotting BarChart #############\n  \n  observeEvent(input$barchart, {\n    \n    output$barchartExp <- renderPlotly({\n      if(is.null(input$experiment)){\n        return(NULL)\n      }\n      barChartDat <- getBarChartDat()\n      barChartList <- list()\n      \n      for(i in 1:length(barChartDat)){\n        bar <- plot_ly(data = barChartDat[[i]], x = ~condition, y = ~expression, type = 'bar', \n                       margin = c(12,10), name = getExperiments()[i]) %>%\n          layout(yaxis = list(title = \"AVG\"), xaxis = list(title = \"\"), margin = list(b = 160), legend = list(x = 5, y = 5))\n        barChartList[[i]] <- bar\n      }\n      barchart <- subplot(barChartList, shareY = TRUE,  which_layout = \"merge\", margin = 0.02, heights = 0.9)\n      barchart\n    })\n  })\n  \n  ############ Plotting BoxPlot ##############\n  observeEvent(input$barchart, {\n    output$boxplot <- renderPlot({\n      boxPlotDat <- getBoxPlotDat()\n      boxPlotDat$exp_con <- apply(boxPlotDat[,c('experiment', 'condition')], 1, paste, collapse = \" : \")\n      xlabels <- levels(factor(boxPlotDat$exp_con))\n      ggplot(boxPlotDat, aes(x = exp_con, y = expression, fill = experiment)) +\n        geom_boxplot(position=position_dodge(0.8)) +\n        geom_dotplot(binaxis = \"y\", stackdir = \"center\", position=position_dodge(0.8)) +\n        # Rename the labels, take values from input$conditions as experiment:condition format,\n        # and remove the experiment part.\n        scale_x_discrete(labels = function(x){sub(\".* : \",\"\",x)}) +\n        theme(axis.text.x = element_text(angle = 315, vjust = 0.5, size=12),\n              axis.title.x=element_blank(), axis.title.y=element_blank(),\n              legend.position = \"bottom\", legend.box = \"vertical\",\n              legend.text=element_text(size=12))\n\n    })\n  })\n  \n  # observeEvent(input$barchart, {\n  #   output$boxplot <- renderPlot({\n  #     boxPlotDat <- getBoxPlotDat()\n  #     boxPlotDat$exp_con <- apply(boxPlotDat[,c('experiment', 'condition')], 1, paste, collapse = \" : \")\n  #     xlabels <- levels(factor(boxPlotDat$exp_con))\n  #     ggplot(boxPlotDat, aes(x = exp_con, y = expression, fill = experiment), group = experiment,\n  #            colour = experiment) +\n  #       geom_boxplot(position=position_dodge(0.8)) +\n  #       geom_dotplot(binaxis = \"y\", stackdir = \"center\", position=position_dodge(0.8)) + \n  #       # Rename the labels, take values from input$conditions as experiment:condition format,\n  #       # and remove the experiment part.\n  #       scale_x_discrete(labels = function(x){sub(\".* : \",\"\",x)}) +\n  #       theme(axis.text.x = element_text(angle = 315, vjust = 0.5, size=12), \n  #             legend.position = \"bottom\", legend.box = \"vertical\",\n  #             legend.text=element_text(size=12),\n  #             axis.title.x=element_blank(), axis.title.y=element_blank()) +\n  #       scale_colour_brewer(palette = \"Greens\")\n  # \n  #     \n  #   })\n  # })\n\n  ############ Show Data Table and Download CSV #############\n  downloadCSV <- function(){\n    observeEvent(input$barchart,{\n      if(is.null(input$gene) | is.null(input$condition) | is.null(input$experiment)){\n        return(NULL)\n      }\n      dat <- getDownloadDat()\n      output$csvdownload <- downloadHandler(\n        filename = paste(input$gene, \".csv\"),\n        content = function(file){\n          write.csv(dat, file)\n        }\n      )\n      output$showDataTable <- renderTable(dat, digits = 6)\n    })\n  }\n  \n  downloadCSV()\n  \n  ############## Show ANOVA results ##############\n  observeEvent(input$barchart, {\n    output$ANOVA_results <- renderDataTable(anovaResults2table())\n  })\n  \n  # Disconnect mysql\n  session$onSessionEnded(function(){lapply(dbListConnections(dbDriver(drv=\"MySQL\")), dbDisconnect)})\n})\n",
    "created" : 1503578010841.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1985225233",
    "id" : "95A6CC82",
    "lastKnownWriteTime" : 1503694318,
    "last_content_update" : 1503694318293,
    "path" : "C:/Users/ywen/OneDrive - Ironwood Pharmaceuticals/B_DNA Project/B_DNA_Webapp/Shiny Gene Tool/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}